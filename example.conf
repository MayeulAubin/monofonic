#########################################################################################
# Example conf file for MUSIC2 - monofonIC single resolution simulation ICs
#########################################################################################

#########################################################################################
[setup]
# number of grid cells per linear dimension for calculations = particles for sc initial load
GridRes         = 128

# length of the box in Mpc/h
BoxLength       = 300

# starting redshift
zstart          = 24.0

# order of the LPT to be used (1,2 or 3)
LPTorder        = 3

# also do baryon ICs?
DoBaryons       = no

# do mode fixing Ã  la Angulo&Pontzen
DoFixing        = yes

# invert phases (for paired simulations)
DoInversion     = no

# particle load, can be 'sc' (1x), 'bcc' (2x) or 'fcc' (4x) (increases number of particles by factor!) or 'glass'
ParticleLoad    = sc

# if `ParticleLoad = glass' then specify here where to load the glass distribution from
#GlassFileName   = glass128.hdf5
#GlassTiles      = 1


#########################################################################################
[cosmology]
## transfer = ... specifies the Einstein-Boltzmann plugin module
# transfer        = eisenstein   # Eisenstein&Hu fitting formula

# transfer        = file_CAMB    # CAMB file to be specified as 'transfer_file = ...'
# transfer_file   = wmap5_transfer_out_z0.dat

transfer        = CLASS          # CLASS module (if enabled in CMake file)

ztarget         = 2.5            # target redshift for CLASS module, output at ztarget will be back-scaled to zstart

Omega_m         = 0.302
Omega_b         = 0.045
Omega_L         = 0.698
H0              = 70.3
nspec           = 0.961
sigma_8         = 0.811
# A_s             = 2.148752e-09 # can use instead of sigma_8

ZeroRadiation   = true # For Back-scaling: set to false if your simulation code can deal with Omega_r!=0

# Additional cosmological parameters (set by default to the given values)
# w0              = -1.0
# wa              = 0.0
# Tcmb            = 2.7255
# Neff            = 3.046

# anisotropic large scale tidal field
# see Stuecker+2020
# LSS_aniso_lx    = +0.1
# LSS_aniso_ly    = +0.1
# LSS_aniso_lz    = -0.2

#########################################################################################
[random]
## generator = ... specifies the random field generator plugin module

## > NGenIC compatible random number generator module compatible with V. Springel's original code
## (https://www.h-its.org/2014/11/05/ngenic-code/) as well as the 2LPT code by Pueblas&Scoccmiarro
## (https://cosmo.nyu.edu/roman/2LPT/)
generator      = NGENIC
seed           = 12345

## > The PANPHASIA generator uses a plugin based on original code by A. Jenkins
## Warning: Before using this module, please make sure you read and agree to the distinct license
## requirements by registering on the website http://icc.dur.ac.uk/Panphasia.php

# generator      = PANPHASIA
# descriptor     = [Panph1,L10,(800,224,576),S9,CH1564365824,MXXL]

## > The MUSIC1 multi-scale random number generator is provided for convenience
## warning: MUSIC1 generator is not MPI parallel (yet) (memory is needed for full field on each task)
# generator      = MUSIC1  
# seed[7]        = 12345
# seed[8]        = 23456
# seed[9]        = 34567

# Add a possible constraint field here:
# ConstraintFieldFile = initial_conditions.hdf5
# ConstraintFieldName = ic_white_noise

#########################################################################################
[testing]
# enables diagnostic output
# can be 'none' (default), 'potentials_and_densities', 'velocity_displacement_symmetries', or 'convergence'
test            = none


#########################################################################################
[execution]
# Specify the number of threads / task
NumThreads      = 8


#########################################################################################
[output]
## format = .... specifies the output plugin module

##> RAMSES / GRAFIC2 compatible format
# format	        = grafic2
# filename        = ics_ramses
# grafic_use_SPT  = no # if no then uses PPT, otherwise linear SPT

##> Gadget-2/3 'fortran unformatted binary'-style format
# format          = gadget2
# filename        = ics_gadget.dat
# UseLongids      = false

##> Gadget-2/3 HDF5 format
# format          = gadget_hdf5
# filename        = ics_gadget.hdf5

##> Arepo HDF5 format (virtually identical to gadget_hdf5)
# format          = AREPO
# filename        = ics_arepo.hdf5

##> HACC compatible generic-io format
# format          = genericio
# filename        = ics_hacc

##> Generic HDF5 output format for testing or PT-based calculations
# format          = generic
# filename        = debug.hdf5
# generic_out_eulerian = yes  # if yes then uses PPT for output

